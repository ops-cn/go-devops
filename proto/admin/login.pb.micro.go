// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: admin/login.proto

package admin

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	unified "github.com/ops-cn/go-devops/proto/unified"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LoginMgr service

func NewLoginMgrEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LoginMgr service

type LoginMgrService interface {
	Verify(ctx context.Context, in *LoginParam, opts ...client.CallOption) (*unified.Response, error)
	GetLoginInfo(ctx context.Context, in *UserLoginInfo, opts ...client.CallOption) (*unified.Response, error)
	QueryUserMenuTree(ctx context.Context, in *UserLoginInfo, opts ...client.CallOption) (*unified.Response, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordParam, opts ...client.CallOption) (*unified.Response, error)
}

type loginMgrService struct {
	c    client.Client
	name string
}

func NewLoginMgrService(name string, c client.Client) LoginMgrService {
	return &loginMgrService{
		c:    c,
		name: name,
	}
}

func (c *loginMgrService) Verify(ctx context.Context, in *LoginParam, opts ...client.CallOption) (*unified.Response, error) {
	req := c.c.NewRequest(c.name, "LoginMgr.Verify", in)
	out := new(unified.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginMgrService) GetLoginInfo(ctx context.Context, in *UserLoginInfo, opts ...client.CallOption) (*unified.Response, error) {
	req := c.c.NewRequest(c.name, "LoginMgr.GetLoginInfo", in)
	out := new(unified.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginMgrService) QueryUserMenuTree(ctx context.Context, in *UserLoginInfo, opts ...client.CallOption) (*unified.Response, error) {
	req := c.c.NewRequest(c.name, "LoginMgr.QueryUserMenuTree", in)
	out := new(unified.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginMgrService) UpdatePassword(ctx context.Context, in *UpdatePasswordParam, opts ...client.CallOption) (*unified.Response, error) {
	req := c.c.NewRequest(c.name, "LoginMgr.UpdatePassword", in)
	out := new(unified.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoginMgr service

type LoginMgrHandler interface {
	Verify(context.Context, *LoginParam, *unified.Response) error
	GetLoginInfo(context.Context, *UserLoginInfo, *unified.Response) error
	QueryUserMenuTree(context.Context, *UserLoginInfo, *unified.Response) error
	UpdatePassword(context.Context, *UpdatePasswordParam, *unified.Response) error
}

func RegisterLoginMgrHandler(s server.Server, hdlr LoginMgrHandler, opts ...server.HandlerOption) error {
	type loginMgr interface {
		Verify(ctx context.Context, in *LoginParam, out *unified.Response) error
		GetLoginInfo(ctx context.Context, in *UserLoginInfo, out *unified.Response) error
		QueryUserMenuTree(ctx context.Context, in *UserLoginInfo, out *unified.Response) error
		UpdatePassword(ctx context.Context, in *UpdatePasswordParam, out *unified.Response) error
	}
	type LoginMgr struct {
		loginMgr
	}
	h := &loginMgrHandler{hdlr}
	return s.Handle(s.NewHandler(&LoginMgr{h}, opts...))
}

type loginMgrHandler struct {
	LoginMgrHandler
}

func (h *loginMgrHandler) Verify(ctx context.Context, in *LoginParam, out *unified.Response) error {
	return h.LoginMgrHandler.Verify(ctx, in, out)
}

func (h *loginMgrHandler) GetLoginInfo(ctx context.Context, in *UserLoginInfo, out *unified.Response) error {
	return h.LoginMgrHandler.GetLoginInfo(ctx, in, out)
}

func (h *loginMgrHandler) QueryUserMenuTree(ctx context.Context, in *UserLoginInfo, out *unified.Response) error {
	return h.LoginMgrHandler.QueryUserMenuTree(ctx, in, out)
}

func (h *loginMgrHandler) UpdatePassword(ctx context.Context, in *UpdatePasswordParam, out *unified.Response) error {
	return h.LoginMgrHandler.UpdatePassword(ctx, in, out)
}
